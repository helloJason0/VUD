export default {
  components: { DatePicker },
  props: {
    request: {
      type: Function as PropType<(params: Params) => Promise<RequestRes>>,
      default: () => () => new Promise<RequestRes>((resolve) => {
        resolve({} as RequestRes)
      })
    },
    columns: {
      type: Array as PropType<ProTableProps['columns']>,
      default: () => []
    },
    rowKey: {
      type: String as PropType<string>,
      default: 'id'
    },
    /** 页面大小 */
    pageSize: {
      type: Number as PropType<number>,
      default: 50
    },
    /** 当前页的名称 */
    currentField: {
      type: String as PropType<string>,
      default: 'page_no'
    },
    pageSizeField: {
      type: String as PropType<string>,
      default: 'page_size'
    },
    formConfig: {
      type: Object,
      default: () => ({})
    }
  },
  name: 'ProTable',
  computed: {
    formColumns () {
      return [
        ...this.columns
          .filter(({ search }) => search)
          .map(({ title, valueEnum, options, formLabel, ...reset }) => {
            return {
              title,
              options: options ?? valueEnumHandle(valueEnum || []),
              formLabel: formLabel || title,
              valueEnum,
              ...reset
            };
          })
      ];
    },
    columnsOpt () {
      return this.columns.map(({ options, valueEnum, ...resets }) => {
        const optionsSource = options || valueEnum
        return {
          valueEnum: optionsSource ? optionsHandle(optionsSource) : undefined,
          options,
          ...resets
        }
      })
    }
  },
  data () {
    const createData = (): ProTableData['formData'] =>
      this.columns
        .filter(({ search }) => search)
        .reduce((pre, cur) => {
          return Object.assign(pre, { [cur.formName || cur.field]: cur.initValue });
        }, {});
    return {
      formData: createData(),
      tempFormData: createData(),
      tableData: [] as ProTableData['tableData'],
      total: 0,
      current: 1,
      loading: false,
      pageSizeData: 0
    };
  },
  methods: {
    formatterHandle (val: string, valueEnum: Map<string | number, string | number>) {
      const res = valueEnum.get(val)
      return res !== undefined ? res : '--'
    },
    async getTableData () {
      this.loading = true;
      try {
        const { currentField, pageSizeField, current, pageSize, formData } = this;
        const { list, ...resetData } = await this.request({
          ...formData,
          [currentField]: current,
          [pageSizeField]: pageSize
        });
        const tableData = list || resetData.tableData;
        Object.assign(this, { ...resetData, tableData });
      } catch (error) {
        console.error(error);
      }
      this.loading = false;
    },
    selectSubmit () {
      Object.assign(this.formData, this.tempFormData);
      this.getTableData();
    },
    uploadTable () {
      this.getTableData();
    },
    refreshTableData () {
      this.current = 1;
      this.getTableData();
    },
    sizeChange (num: number) {
      this.pageSizeData = num;
      this.getTableData();
    },
    pageChange (current: number) {
      this.current = current;
      this.getTableData();
    }
  },
  mounted () {
    this.getTableData();
  }
}